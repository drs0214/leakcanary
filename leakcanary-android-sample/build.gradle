apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
// Required to run obfuscated instrumentation tests:
// ./gradlew leakcanary-android-sample:connectedCheck -Pminify
apply plugin: 'com.slack.keeper'

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath 'com.slack.keeper:keeper:0.2.0'
  }
}

dependencies {
  debugImplementation project(':leakcanary-android')

  implementation deps.kotlin.stdlib

  testImplementation deps.junit
  testImplementation deps.robolectric

  androidTestImplementation project(':leakcanary-android-instrumentation')
  androidTestImplementation deps.androidx.test.espresso
  androidTestImplementation deps.androidx.test.rules
  androidTestImplementation deps.androidx.test.runner
  androidTestUtil deps.androidx.test.orchestrator
}

android {
  compileSdkVersion versions.compileSdk

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    applicationId "com.example.leakcanary"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk

    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArgument "listener",
        "leakcanary.FailTestOnLeakRunListener"
    testInstrumentationRunnerArguments clearPackageData: 'true'

    /*
    TODO Latest on this: we need to cover the possibility of both orders (and it looks like we do)
    To change this order this we can change the newRunListenerMode to true / false.

    Latest issue that we need to deal with: activity detection is triggered AFTER we run the analysis
    so we have no weak ref at the end of the test. So weird. why is that happening too late?
    => we can fix that with a lifecycle callbacks from the test runner, that will wait until
    activity destroyed ( + timeout). In the meantime, just added a sleep to the test.
    See androidx.test.runner.MonitoringInstrumentation.waitForActivitiesToComplete

    Haven't figured out yet why the failure details aren't reported.
    => wondering if maybe there are other listeners doing some work?
    => thought it might be timing and tried sending earlier without analysis and we get:

    "Test failed to run to completion. Reason: 'Test run failed to complete. Expected 1 tests, received 0'. Check device logcat for details"

    => That's probably because failures = 0 in test finished

    => tried adding a failure, still getting an error that count is 0. weird.

    The xml file has the right data.

    One thing though: end time is 0.

    <testcase name="helperTextHasExpectedContent" classname="leakcanary.tests.TuPeuxPasTest" start-time="1591247972.550" end-time="0.000" time="-1.59124797255E9">
<testsuite name="" tests="1" failures="1" errors="0" skipped="0" time="1.367" timestamp="2020-06-04T05:19:33" hostname="localhost">

    For the real failure we have a proper end time.

    <testsuite name="" tests="1" failures="1" errors="0" skipped="0" time="1.314" timestamp="2020-06-04T05:22:05" hostname="localhost">
  <testcase name="helperTextHasExpectedContent" classname="leakcanary.tests.TuPeuxPasTest" start-time="1591248125.397" end-time="1591248125.744" time="0.347">

That's written in https://github.com/android/android-test/blob/e50fde003e6eadaf40e00897e9a6534e316d388d/runner/android_test_orchestrator/java/androidx/test/orchestrator/listeners/OrchestrationXmlTestRunListener.java

Set in https://github.com/android/android-test/blob/ffe3239dcdc7da4c2c3b6fe40a2504a5f30c8476/runner/android_junit_runner/java/androidx/test/orchestrator/listeners/result/TestRunResult.java

testEnded

=> looks like that means there's still a test finished?


=> Yup that was it. Yey it works! Now to clean up.


     */

    testInstrumentationRunnerArgument "newRunListenerMode", "true"

    testOptions {
      execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
  }

  buildTypes {
    // Build with ./gradlew leakcanary-android-sample:installDebug -Pminify
    if (project.hasProperty('minify')) {
      debug {
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
      }
    } else {
      debug
    }

    release
  }

  dexOptions {
    dexInProcess false
  }

  lintOptions {
    disable 'GoogleAppIndexingWarning'
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

// Instrumentation test dependencies resolve to 27.1.1 so we align the sample.
configurations.all {
  resolutionStrategy {
    eachDependency { details ->
      // Force all of the primary support libraries to use the same version.
      if (details.requested.group == 'com.android.support') {
        details.useVersion "27.1.1"
      }
    }
  }
}
